package javaff.search;

import javaff.planning.State;
import javaff.planning.Filter;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.LinkedList;
import java.util.Comparator;
import java.util.HashSet;
import java.math.BigDecimal;

import java.util.Hashtable;
import java.util.Iterator;

public class SimulatedAnnealing extends Search {
	protected BigDecimal bestHValue;

	protected Hashtable closed;
	protected LinkedList open;
	protected Filter filter = null;

	//Initial temperature
	protected double temperature = 1;
	//Terminating condition
	protected double minTemp = 0.001;
	//Rate in which temperature decreases
	protected double tempAlpha = 0.7;
	//Iteration per temperature drop
	protected double iterations = 40;

	public SimulatedAnnealing(State s) {
		this(s, new HValueComparator());
	}

	public SimulatedAnnealing(State s, Comparator c) {
		super(s);
		setComparator(c);

		closed = new Hashtable();
		open = new LinkedList();
	}

	public void setFilter(Filter f) {
		filter = f;
	}

	public State removeNext() {
		return (State) ((LinkedList) open).removeFirst();
	}

	public boolean needToVisit(State s) {
		Integer Shash = new Integer(s.hashCode());
		State D = (State) closed.get(Shash);
		if (closed.containsKey(Shash) && D.equals(s))
			return false;
		closed.put(Shash, s);
		return true;
	}

	//initialSearch tries to find a solution before Simulated Annealing starts. This is required for optimization
	//In this case, it will use EHC to search for an initial solution
	public State initialSearch() {
		needToVisit(start);
		open.add(start); 
		bestHValue = start.getHValue();
		State s = null;
		while (!open.isEmpty()) {
			s = removeNext();
			Set successors = s.getNextStates(filter.getActions(s));
			Iterator succItr = successors.iterator();
			while (succItr.hasNext()) {
				State succ = (State) succItr.next();
				if (needToVisit(succ)) {
					if (succ.goalReached()) {
						return succ;
					} else if (succ.getHValue().compareTo(bestHValue) < 0) {
						bestHValue = succ.getHValue();
						javaff.JavaFF.infoOutput.println(bestHValue);
						open = new LinkedList();
						open.add(succ);
						break;
					} else {
						open.add(succ);
					}
				}
			}
		}
		return s;
	}

	// The formula source: Wikipedia
	// If e' < e then return 1.0 else return exp(-(e' - e)/T)
	public double acceptanceProbability(double currentH, double neighbourH, double temperature){
		if (neighbourH < currentH)
			return 1;
		else
			return Math.exp(-(neighbourH - currentH) / temperature);
	}

	// Viable neighbours are everything from the "closed list" as well as
	// neighbours generated by current optimum
	// I still need to figure out of including states from closed list will enchance performance or not
	public Set neighbourGeneration(State s){
		Set neighbours = new HashSet<>();
		if(s != null){
			Set successors = s.getNextStates(filter.getActions(s));
			Iterator itr = successors.iterator();
			while(itr.hasNext()){
				State succ = (State) itr.next();
				neighbours.add(succ);
			}
		}

		// If there are no successors then we should generate them from the closed list
		if (neighbours.size() == 0){
			neighbours.addAll(closed.values());
		}
		return neighbours;
	}

	// Neighbour selection could be based on comparison with current state or just random selection
	// I think neighbours that have similar values to current state should get a higher probability of being selected
	public State neighbourSelection(Set n, State s){
		double avgProb = 1 / (double)n.size();
		double r = javaff.JavaFF.generator.nextDouble();
		double previousProb = avgProb;

		Iterator itr = n.iterator();
		while(itr.hasNext()){
			State selected = (State)itr.next();
			if (r <= previousProb) {
				return selected;
			}
			previousProb += avgProb;
			r = javaff.JavaFF.generator.nextDouble();
		}

		return null;
	}

	// From the current optimum we check if its solution
	// If not then we perform search/optimisation
	public State search(){
		State currentOptimum = initialSearch();
		if (currentOptimum.goalReached()){
			return currentOptimum;
		}

		// While temperature is not 0, we initialise an iterator that is ran k times
		// Each iteration we selected a neighbour randomly and we test it against acceptanceprobability
		// If it passes, then we choose that neighbour to explore.
		while (temperature > minTemp){
			Set n = neighbourGeneration(currentOptimum);
			for (int i =0; i < iterations; ++i){
				//currentOptimum has no play in neighbour selection as of right now
				State selected = neighbourSelection(n, currentOptimum);

				if (selected.goalReached()){
					return selected;
				}

				double currentH = currentOptimum.getHValue().doubleValue();
				double selectedH = selected.getHValue().doubleValue();
				double acceptanceProb = acceptanceProbability(currentH, selectedH, temperature);
				double r = javaff.JavaFF.generator.nextDouble();
				if (r < acceptanceProb) {
					currentOptimum = selected;
				}

			}

			temperature *= tempAlpha;
		}
		


		return currentOptimum;
	}
}
